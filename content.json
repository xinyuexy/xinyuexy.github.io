[{"title":"Java中的Iterable与Iterator详解","date":"2018-07-09T12:02:31.000Z","path":"2018/07/09/Java中的Iterable与Iterator辨析/","content":"<p>在Java中，我们可以对List集合进行如下几种方式的遍历：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"number\">5</span>);</span><br><span class=\"line\">list.add(<span class=\"number\">23</span>);</span><br><span class=\"line\">list.add(<span class=\"number\">42</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class=\"line\">    System.out.print(list.get(i) + <span class=\"string\">\",\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Iterator it = list.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">    System.out.print(it.next() + <span class=\"string\">\",\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Integer i : list) &#123;</span><br><span class=\"line\">    System.out.print(i + <span class=\"string\">\",\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一种就是普通的for循环，第二种为迭代器遍历，第三种是for each循环。后面两种方式涉及到Java中的iterator和iterable对象，接下来我们来看看这两个对象的区别以及如何在自定义类中实现for each循环。</p>\n<a id=\"more\"></a>\n<h2 id=\"Iterator与Iterable\"><a href=\"#Iterator与Iterable\" class=\"headerlink\" title=\"Iterator与Iterable\"></a>Iterator与Iterable</h2><p>iterator为Java中的迭代器对象，是能够对List这样的集合进行迭代遍历的底层依赖。而iterable接口里定义了返回iterator的方法，相当于对iterator的封装，同时实现了iterable接口的类可以支持for each循环。</p>\n<h3 id=\"iterator内部细节\"><a href=\"#iterator内部细节\" class=\"headerlink\" title=\"iterator内部细节\"></a>iterator内部细节</h3><p>jdk中Iterator接口主要方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">  \t<span class=\"function\">E <span class=\"title\">next</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>iterator通过以上两个方法定义了对集合迭代访问的方法，而具体的实现方式依赖于不同的实现类，具体的集合类实现Iterator接口中的方法以实现迭代。</p>\n<p>可以发现，在List中并没有实现Iterator接口，而是实现的Iterable接口。进一步观察Iterable接口的源码可以发现其只是返回了一个Iterator对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"function\">Iterator&lt;T&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以我们可以使用如下方式来对List进行迭代了（通过调用iterator()方法）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterator it = list.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (it.hasNext()) &#123;</span><br><span class=\"line\">    System.out.print(it.next() + <span class=\"string\">\",\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同时实现了Iterable接口的还可以使用for each循环。</p>\n<h3 id=\"for-each原理\"><a href=\"#for-each原理\" class=\"headerlink\" title=\"for each原理\"></a>for each原理</h3><p>其实for each循环内部也是依赖于Iterator迭代器，只不过Java提供的语法糖，Java编译器会将其转化为Iterator迭代器方式遍历。我们对以下for each循环进行反编译：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (Integer i : list) &#123;</span><br><span class=\"line\">      System.out.println(i);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>反编译后：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer i;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Iterator iterator = list.iterator(); iterator.hasNext(); System.out.println(i))&#123;</span><br><span class=\"line\">        i = (Integer)iterator.next();        </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到Java的for each增强循环是通过iterator迭代器方式实现的。</p>\n<h3 id=\"深入探讨Iterable与Iterator关系\"><a href=\"#深入探讨Iterable与Iterator关系\" class=\"headerlink\" title=\"深入探讨Iterable与Iterator关系\"></a>深入探讨Iterable与Iterator关系</h3><p>有一个问题，为什么不直接将hasNext()，next()方法放在Iterable接口中，其他类直接实现就可以了？</p>\n<p>原因是有些集合类可能不止一种遍历方式，实现了Iterable的类可以再实现多个Iterator内部类，例如<code>LinkedList</code>中的<code>ListItr</code>和<code>DescendingIterator</code>两个内部类，就分别实现了双向遍历和逆序遍历。通过返回不同的<code>Iterator</code>实现不同的遍历方式，这样更加灵活。如果把两个接口合并，就没法返回不同的<code>Iterator</code>实现类了。ListItr相关源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> ListIterator&lt;E&gt; <span class=\"title\">listIterator</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">      checkPositionIndex(index);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ListItr(index);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListItr</span> <span class=\"keyword\">implements</span> <span class=\"title\">ListIterator</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">      ListItr(<span class=\"keyword\">int</span> index) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// assert isPositionIndex(index);</span></span><br><span class=\"line\">          next = (index == size) ? <span class=\"keyword\">null</span> : node(index);</span><br><span class=\"line\">          nextIndex = index;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> nextIndex &lt; size;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  \t...</span><br></pre></td></tr></table></figure>\n<p>如上所示可以通过调用<code>list.listIterator()</code>方法返回iterator迭代器（<code>list.iterator()</code>只是其默认实现）</p>\n<p><code>DescendingIterator</code>源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;E&gt; <span class=\"title\">descendingIterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DescendingIterator();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DescendingIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">E</span>&gt; \t</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ListItr itr = <span class=\"keyword\">new</span> ListItr(size());</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> itr.hasPrevious();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> itr.previous();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        itr.remove();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样可以通过<code>list.descendingIterator()</code>使用该迭代器。</p>\n<h2 id=\"实现自己的迭代器\"><a href=\"#实现自己的迭代器\" class=\"headerlink\" title=\"实现自己的迭代器\"></a>实现自己的迭代器</h2><p>我们现在有一个自定义类ArrayMap，现在如果对其进行如下for each遍历：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayMap&lt;String, Integer&gt; am = <span class=\"keyword\">new</span> ArrayMap&lt;&gt;();</span><br><span class=\"line\">am.put(<span class=\"string\">\"hello\"</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">am.put(<span class=\"string\">\"syrups\"</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (String s: am) &#123;</span><br><span class=\"line\">   System.out.println(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于我们并没有实现hashNext和next抽象方法，所以无法对其进行遍历。</p>\n<h3 id=\"自定义迭代器类\"><a href=\"#自定义迭代器类\" class=\"headerlink\" title=\"自定义迭代器类\"></a>自定义迭代器类</h3><p>我们首先自定义一个迭代器类实现hashNext和next方法，并将其作为ArrayMap的内部类，相关代码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">KeyIterator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Iterator</span>&lt;<span class=\"title\">K</span>&gt; </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">KeyIterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         ptr = <span class=\"number\">0</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasNext</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> (ptr != size);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"meta\">@Override</span></span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> K <span class=\"title\">next</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">         K returnItem = keys[ptr];</span><br><span class=\"line\">         ptr += <span class=\"number\">1</span>;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> returnItem;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到我们在next中指定的遍历规则是根据ArrayMap的key值进行遍历。有了上述迭代器类，我们就可以使用iterator方式在外部对其进行遍历了，遍历代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayMap&lt;String, Integer&gt; am = <span class=\"keyword\">new</span> ArrayMap&lt;&gt;();</span><br><span class=\"line\">am.put(<span class=\"string\">\"hello\"</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">am.put(<span class=\"string\">\"syrups\"</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">ArrayMap.KeyIterator ami = am.new KeyIterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (ami.hasNext()) &#123;</span><br><span class=\"line\">    System.out.println(ami.next());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上所示，通过创建KeyIterator对象进行迭代访问（注意外部类创建内部类对象的方式）。</p>\n<h3 id=\"支持for-each循环\"><a href=\"#支持for-each循环\" class=\"headerlink\" title=\"支持for each循环\"></a>支持for each循环</h3><p>现在还不能支持for each循环访问，因为我们还没有实现iterable接口，首先在ArrayMap中实现Iterable接口：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayMap</span>&lt;<span class=\"title\">K</span>, <span class=\"title\">V</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">Iterable</span>&lt;<span class=\"title\">K</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> K[] keys;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> V[] values;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayMap</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        keys = (K[]) <span class=\"keyword\">new</span> Object[<span class=\"number\">100</span>];</span><br><span class=\"line\">        values = (V[]) <span class=\"keyword\">new</span> Object[<span class=\"number\">100</span>];</span><br><span class=\"line\">        size = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后重写iterator()方法，并在其中返回我们自己的迭代器对象(iterator)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Iterator&lt;K&gt; <span class=\"title\">iterator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> KeyIterator();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意我们自定义的KeyIterator类必须要实现Iterator接口，否则在iterator()方法中返回的类型不匹配。</p>\n<h2 id=\"总结与感想\"><a href=\"#总结与感想\" class=\"headerlink\" title=\"总结与感想\"></a>总结与感想</h2><p>（1）学会深入思考，一点点抽丝剥茧，多想想为什么这样实现，很多问题没有自己想象中的那么复杂。</p>\n<p>（2）遇到疑惑不放弃，这是提升自己最好的机会，遇到某个疑难的点，解决的过程中会挖掘出很多相关东西。</p>\n<p>参考资料：</p>\n<p>（1）<a href=\"https://joshhug.gitbooks.io/hug61b/content/chap6/chap63.html\" target=\"_blank\" rel=\"noopener\">CS61B</a></p>\n<p>（2）<a href=\"http://www.hollischuang.com/archives/1776\" target=\"_blank\" rel=\"noopener\">for each实现原理</a></p>\n<p>（3）<a href=\"https://www.jianshu.com/p/cf82ab7e51ef\" target=\"_blank\" rel=\"noopener\">Iterable与iterator区别</a></p>\n","tags":[{"name":"Java基础","slug":"Java基础","permalink":"http://xinyuexy.github.io/tags/Java基础/"},{"name":"迭代器","slug":"迭代器","permalink":"http://xinyuexy.github.io/tags/迭代器/"}]},{"title":"关于链表中哨兵结点的问题","date":"2018-07-06T08:54:09.000Z","path":"2018/07/06/关于链表中哨兵结点的问题/","content":"<p>最近正在学习UC Berkeley的CS61B这门课，主要是采用Java语言去实现一些数据结构以及运用数据结构去做一些project。这门课不仅告诉你这个东西怎么做，而且一步一步探寻为什么要这样做以及为什么会有这些功能。我们有时在接触某段代码或功能的实现时，可能直接就看到了它最终的面貌，而不知道如何一步步演化而来，其实每一个功能的添加或优化都是对应一个问题的解决。下面就这门课中关于链表中哨兵结点的相关问题进行总结。</p>\n<h2 id=\"什么是哨兵结点\"><a href=\"#什么是哨兵结点\" class=\"headerlink\" title=\"什么是哨兵结点\"></a>什么是哨兵结点</h2><p>哨兵顾名思义有巡逻、检查的功能，在我们程序中通过增加哨兵结点往往能够简化边界条件，从而防止对特殊条件的判断，使代码更为简便优雅，在链表中应用最为典型。</p>\n<a id=\"more\"></a>\n<h2 id=\"单链表中的哨兵结点\"><a href=\"#单链表中的哨兵结点\" class=\"headerlink\" title=\"单链表中的哨兵结点\"></a>单链表中的哨兵结点</h2><p>首先讨论哨兵结点在单链表中的运用，如果不加哨兵结点在进行头尾删除和插入时需要进行特殊判断。比如在尾部插入结点的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addLast</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (first == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    \tfirst = <span class=\"keyword\">new</span> Node(x, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node p = first;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        p = p.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p.next = <span class=\"keyword\">new</span> Node(x, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如上所示需要对结点为空的特殊情况进行判断，头部加了一个哨兵结点后就可以不需要判断了（不会为空）</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/List/LinkedList1.jpg\" style=\"zoom: 80%\"></p>\n<h2 id=\"双链表中的哨兵结点\"><a href=\"#双链表中的哨兵结点\" class=\"headerlink\" title=\"双链表中的哨兵结点\"></a>双链表中的哨兵结点</h2><h3 id=\"Version-1-双哨兵\"><a href=\"#Version-1-双哨兵\" class=\"headerlink\" title=\"Version 1: 双哨兵\"></a>Version 1: 双哨兵</h3><p>在双链表中需要能够在头部和尾部分别进行插入删除操作（可以实现双端队列），为了能快速在尾部进行插入删除，需要引入指向尾部的指针。截图如下（图片来自CS61B）</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/LinkedList2.jpg\" style=\"zoom: 60%\"></p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/LinkedList3.jpg\" style=\"zoom: 60%\"></p>\n<p>上述增加了一个指向尾部的last结点，从上图可以看出一个问题，last结点有时指向哨兵结点，有时指向实际结点。这会导致特殊情况的出现，比如在进行addFirst操作时，last指向哨兵结点时插入后需要将last往后移动一个，而第二张图指向实际结点时在头部插入结点后并不需要改变last指针。这时需要在尾部后也引入一个哨兵结点，以使其一致。相应示意图如下：</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/LinkedList4.jpg\" style=\"zoom: 60%\"></p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/LinkedList5.jpg\" style=\"zoom: 60%\"></p>\n<h3 id=\"Version-2：循环双链表\"><a href=\"#Version-2：循环双链表\" class=\"headerlink\" title=\"Version 2：循环双链表\"></a>Version 2：循环双链表</h3><p>上述Version1需要两个哨兵结点，可以对其进行改进。可以使用头部结点的prev指针指向尾部，尾部结点的next指针指向哨兵，这样就只需要一个哨兵结点，使链表变成循环链表，比Version1更为简洁优雅。</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/LinkedList6.jpg\" style=\"zoom:60%\"></p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/LinkedList7.jpg\" style=\"zoom:60%\"></p>\n<p>在对如上所示进行插入和删除操作时一定要格外注意，自己在写的时候很容易就漏掉某个指针的关系设置，最好在纸上自己画一遍。（对于要改变的连接可能会影响其他的，这时可将其暂存或最好设置）</p>\n<p>在头部插入的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addFirst</span><span class=\"params\">(Item item)</span> </span>&#123;</span><br><span class=\"line\">     Node node = <span class=\"keyword\">new</span> Node(item);</span><br><span class=\"line\">     node.prev = sentinel;</span><br><span class=\"line\">     node.next = sentinel.next;</span><br><span class=\"line\">     sentinel.next.prev = node;</span><br><span class=\"line\">     sentinel.next = node;</span><br><span class=\"line\">     size++;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>尾部插入代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addLast</span><span class=\"params\">(Item item)</span> </span>&#123;</span><br><span class=\"line\">    Node node = <span class=\"keyword\">new</span> Node(item);</span><br><span class=\"line\">    node.prev = sentinel.prev;</span><br><span class=\"line\">    node.next = sentinel;</span><br><span class=\"line\">    sentinel.prev.next = node;</span><br><span class=\"line\">    sentinel.prev = node;</span><br><span class=\"line\">    size++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>头部删除代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Item <span class=\"title\">removeFirst</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">     Item item = sentinel.next.item;</span><br><span class=\"line\">     sentinel.next = sentinel.next.next;</span><br><span class=\"line\">     sentinel.next.prev = sentinel;</span><br><span class=\"line\">     size--;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> item;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>尾部删除代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Item <span class=\"title\">removeLast</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Item item = sentinel.prev.item;</span><br><span class=\"line\">    Node sl = sentinel.prev.prev;</span><br><span class=\"line\">    sl.next = sl.next.next;</span><br><span class=\"line\">    sl.next.prev = sl;</span><br><span class=\"line\">    size--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结与感想\"><a href=\"#总结与感想\" class=\"headerlink\" title=\"总结与感想\"></a>总结与感想</h2><p>（1）虽然看起来很小很简单的事情，但实现起来却有很多细小问题可以考虑，学会把一件小事做的很漂亮。（small but smart）</p>\n<p>（2）学会分析一个东西的来龙去脉，为什么会有这部分，以及怎么改进的。</p>\n<p>参考：</p>\n<p>1.cs61b:<a href=\"https://joshhug.gitbooks.io/hug61b/content/chap2/chap23.html\" target=\"_blank\" rel=\"noopener\">https://joshhug.gitbooks.io/hug61b/content/chap2/chap23.html</a></p>\n<p>2.算法导论10.2链表</p>\n","tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://xinyuexy.github.io/tags/Algorithm/"},{"name":"LinkedList","slug":"LinkedList","permalink":"http://xinyuexy.github.io/tags/LinkedList/"}]},{"title":"Echarts结合百度地图API绘制热力图","date":"2018-07-03T05:32:47.144Z","path":"2018/07/03/Echarts结合百度地图API绘制热力图/","content":"<p>最近项目中需要使用echarts与百度地图API结合来绘制事故发生热力图，在将其与百度地图结合的过程中遇到了一些问题，现将其过程与解决方案记录下，以供日后参考。echarts中结合百度地图API的热力图demo：<a href=\"http://gallery.echartsjs.com/editor.html?c=xSJNKs7EX\" target=\"_blank\" rel=\"noopener\">http://gallery.echartsjs.com/editor.html?c=xSJNKs7EX</a></p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/echarts/echarts1.jpg\" style=\"zoom: 60%\"></p>\n<a id=\"more\"></a>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><p><strong>1.引用echarts与百度地图扩展js文件</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--引入百度地图的jssdk，这里需要使用你在百度地图开发者平台申请的 ak--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://api.map.baidu.com/api?v=2.0&amp;ak=\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 ECharts --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/echarts.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引入百度地图扩展 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"dist/extension/bmap.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其实有个简单的方法直接在下载demo中的HTML页面即可，会以http形式引入相关文件，直接拿来用就好。</p>\n<p><strong>2.获取dom以及echarts初始化</strong></p>\n<p>需要获取放置地图div的dom元素，然后将echarts初始化，假如有多个js功能文件都要用到绘图的，这部分最后在主页面HTML中进行，相关代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dom = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"map\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> myChart = echarts.init(dom);</span><br></pre></td></tr></table></figure>\n<p><strong>3.设置option绘制图形</strong></p>\n<p>使用echarts画图都需要定义好option配置项，然后调用函数进行设置，这部分最好单独放入一个函数中，方便后续其他需要绘图的调用，相关代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">drawHeatMap</span>(<span class=\"params\">points</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//\t\tvar dom = document.getElementById(\"contentD\");</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tvar myChart = echarts.init(dom);</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tvar app = &#123;&#125;;</span></span><br><span class=\"line\">\t\toption = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">//\t\tapp.title = '热力图与百度地图扩展';</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t    myChart.setOption(option = &#123;</span><br><span class=\"line\">\t\t        animation: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t        bmap: &#123;</span><br><span class=\"line\">\t\t            center: [<span class=\"number\">117.282699092</span>,<span class=\"number\">31.8669422607</span>],</span><br><span class=\"line\">\t\t            zoom: <span class=\"number\">12</span>,</span><br><span class=\"line\">\t\t            roam: <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t        &#125;,</span><br><span class=\"line\">\t\t        visualMap: &#123;</span><br><span class=\"line\">\t\t            show: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t            top: <span class=\"string\">'top'</span>,</span><br><span class=\"line\">\t\t            min: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t            max: <span class=\"number\">100</span>,</span><br><span class=\"line\">\t\t            seriesIndex: <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t            calculable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t            inRange: &#123;</span><br><span class=\"line\">\t\t                color: [<span class=\"string\">'blue'</span>, <span class=\"string\">'blue'</span>, <span class=\"string\">'green'</span>, <span class=\"string\">'yellow'</span>, <span class=\"string\">'red'</span>]</span><br><span class=\"line\">\t\t            &#125;</span><br><span class=\"line\">\t\t        &#125;,</span><br><span class=\"line\">\t\t        series: [&#123;</span><br><span class=\"line\">\t\t            type: <span class=\"string\">'heatmap'</span>,</span><br><span class=\"line\">\t\t            coordinateSystem: <span class=\"string\">'bmap'</span>,</span><br><span class=\"line\">\t\t            data: points,</span><br><span class=\"line\">\t\t            pointSize: <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\t            blurSize: <span class=\"number\">6</span></span><br><span class=\"line\">\t\t        &#125;]</span><br><span class=\"line\">\t\t    &#125;);</span><br><span class=\"line\"><span class=\"comment\">//\t\t    if (!app.inNode) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t        // 添加百度地图插件</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t        var map = myChart.getModel().getComponent('bmap').getBMap();</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t        map.addControl(new BMap.MapTypeControl());</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t    &#125;</span></span><br><span class=\"line\">\t\t    </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (option &amp;&amp; <span class=\"keyword\">typeof</span> option === <span class=\"string\">\"object\"</span>) &#123;</span><br><span class=\"line\">\t\t\t    myChart.setOption(option, <span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>4.获取百度地图扩展</strong></p>\n<p>最后需要获取地图对象，以便后续调用百度地图API，相关代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = myChart.getModel().getComponent(<span class=\"string\">'bmap'</span>).getBMap();</span><br><span class=\"line\">map.addControl(<span class=\"keyword\">new</span> BMap.MapTypeControl());</span><br><span class=\"line\">map.centerAndZoom(<span class=\"string\">\"合肥\"</span>,<span class=\"number\">12</span>);</span><br><span class=\"line\">map.enableScrollWheelZoom(<span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>注意后续如果需要使用百度地图API中的函数画图，需要每次先调用上述代码第一行获取map对象，否则无法绘制。</p>\n<p><strong>5.最终结果</strong></p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/echarts/echarts2.jpg\" style=\"zoom: 80%\"></p>\n<h2 id=\"总结与感想\"><a href=\"#总结与感想\" class=\"headerlink\" title=\"总结与感想\"></a>总结与感想</h2><p>（1）项目中使用的是ajax获取数据，由于Ajax是异步的，所以需要把绘图的函数放入ajax的回调函数中，不然可能在还没获取完数据时，就已经执行了绘图代码。</p>\n<p>（2）注意引入js文件的顺序，第一次画不出来就是因为没有把百度地图ak的sj文件放到echarts前面</p>\n<p>（3）学会发现问题，定位问题以及解决问题。其实很多代码有bug没有想象中的那复杂，很多时候主体思路和框架都对了，就是一两行细节的问题，这时就需要反复利用调式手段，不断尝试，发现问题所在，不然前面可能都功亏一篑了。</p>\n<p>参考：<a href=\"https://github.com/apache/incubator-echarts/tree/master/extension/bmap\" target=\"_blank\" rel=\"noopener\">https://github.com/apache/incubator-echarts/tree/master/extension/bmap</a></p>\n<p><a href=\"http://gallery.echartsjs.com/editor.html?c=xSJNKs7EX\" target=\"_blank\" rel=\"noopener\">http://gallery.echartsjs.com/editor.html?c=xSJNKs7EX</a></p>\n","tags":[{"name":"echarts","slug":"echarts","permalink":"http://xinyuexy.github.io/tags/echarts/"},{"name":"可视化","slug":"可视化","permalink":"http://xinyuexy.github.io/tags/可视化/"}]},{"title":"关于Java中读取和修改SQL大文件的问题","date":"2018-03-26T00:39:59.000Z","path":"2018/03/26/关于Java中读取和修改大文件的问题/","content":"<p>最近在项目中需要读取sql文件，并修改里面的一部分内容。主要问题是sql文件里的插入语句中的日期是Oracle形式的，需要将其替换为Mysql形式的，其他的不变。项目中的sql文件有几十万条记录，数据量比较大，这可能在读取文件的时候带来一些问题。</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/mysql17.jpg\" style=\"zoom:60%\"></p>\n<p>如上图所示，由于MySQL中没有to_date函数，而且里面的日期格式不对，也就是需要将画红线的部分替换为’2014-06-25’。（注意一行中有多个to_date）</p>\n<a id=\"more\"></a>\n<h2 id=\"使用正则表达式进行查找替换\"><a href=\"#使用正则表达式进行查找替换\" class=\"headerlink\" title=\"使用正则表达式进行查找替换\"></a>使用正则表达式进行查找替换</h2><p>最直接想到就是使用Java中的正则表达式来匹配到相应的字符串并替换。这里可以先对少量几行的数据进行测试，如果成功了再考虑对整个文件进行替换。</p>\n<p>Java中的正则表达式主要是两个类：Pattern类和Matcher类。Pattern类将正则表达式字符串编译为pattern对象以调用相应的匹配方法。Matcher类是对输入字符串进行解释和匹配操作的引擎。一个典型的使用正则表达式的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pattern p = Pattern.compile(<span class=\"string\">\"a*b\"</span>);</span><br><span class=\"line\">Matcher m = p.matcher(<span class=\"string\">\"aaaaab\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> b = m.matches();</span><br></pre></td></tr></table></figure>\n<p>matches()对整个字符串进行匹配,只有整个字符串都匹配了才返回true ，这显然和我们的要求不符，Matcher类中还提供了一个find方法可以进行多次匹配。如果在文本中多次匹配，find() 方法返回第一个，之后每次调用 find() 都会返回下一个，而且可以调用start()和end()方法返回匹配到的字符串在整个字符串中的下标。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">String patternString = <span class=\"string\">\"to_date.&#123;2&#125;\\\\d&#123;2&#125;-\\\\d&#123;2&#125;-\\\\d&#123;4&#125;.\\\\d&#123;2&#125;:\\\\d&#123;2&#125;:\\\\d&#123;2&#125;.&#123;27&#125;\"</span>;</span><br><span class=\"line\">Pattern pattern = Pattern.compile(patternString)</span><br><span class=\"line\">Matcher matcher = pattern.matcher(line);</span><br><span class=\"line\"><span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(matcher.find()) &#123; </span><br><span class=\"line\">  String findStr = line.substring(matcher.start(), matcher.end());</span><br><span class=\"line\">  count++;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"found: \"</span> + count + <span class=\"string\">\" : \"</span>  + matcher.start() + <span class=\"string\">\" - \"</span> + matcher.end());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样我们定义一个匹配to_date日期的正则表达式，通过每次调用find方法既可依次匹配到所有的。这里还需要对匹配的字符串进行替换，我们可以用String substring方法将需要的日期截取出来，然后使用正则表达式中的替换方法。</p>\n<p>正则表达式的替换方法主要有以下几个：</p>\n<p><code>1.replaceAll()</code></p>\n<p><code>2.replaceFirst()</code></p>\n<p><code>3.appendReplacement()</code></p>\n<p><code>4.appendTail()</code></p>\n<p>如果直接使用replaceFirst每次都只会替换第一个，而我们一行中有多个需要替换，如果使用replaceAll会一次将所有的替换为相同的，而我们每次替换的内容都不一样，所以需要进行动态替换，这里可以使用appendReplacement()和appendTail()方法。具体参考如下：<a href=\"http://ifeve.com/java-regex/\" target=\"_blank\" rel=\"noopener\">http://ifeve.com/java-regex/</a></p>\n<h2 id=\"关于读写大文件的问题\"><a href=\"#关于读写大文件的问题\" class=\"headerlink\" title=\"关于读写大文件的问题\"></a>关于读写大文件的问题</h2><h4 id=\"缓冲流读写\"><a href=\"#缓冲流读写\" class=\"headerlink\" title=\"缓冲流读写\"></a>缓冲流读写</h4><p>在对测试的小数据替换成功后就需要对整个大文件进行替换了。这里需要读取每行进行替换后并写入到新的文件里，如果每次读取一行就写如一行，由于频繁的IO操作会导致速度很慢。但如果一次性将其读取到StringBuffer里然后再一次写入，会因为数据量大而导致内存堆栈溢出。</p>\n<p>相关代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> BufferedReader br = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> BufferedWriter bw = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> String line = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> StringBuffer buf = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\"></span><br><span class=\"line\">InputStreamReader read = <span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> FileInputStream(<span class=\"keyword\">new</span> File(rfileName)), <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">br = <span class=\"keyword\">new</span> BufferedReader(read);</span><br><span class=\"line\"></span><br><span class=\"line\">OutputStreamWriter write = <span class=\"keyword\">new</span> OutputStreamWriter(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"keyword\">new</span> File(wfileName)),<span class=\"string\">\"utf-8\"</span>);        </span><br><span class=\"line\">bw = <span class=\"keyword\">new</span> BufferedWriter(write);</span><br><span class=\"line\"><span class=\"keyword\">while</span>((line = br.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//执行替换操作</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  buf.append(line.toString()).append(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bw.write(buf.toString());</span><br></pre></td></tr></table></figure>\n<p>这里可以使用缓冲的读写，不带缓冲的操作，每读一个字节就要写入一个字节，由于涉及磁盘的IO操作相比内存的操作要慢很多，所以不带缓冲的流效率很低，带缓冲的流，可以一次读很多字节，但不向磁盘中写入，只是先放到内存里。等凑够了缓冲区大小的时候一次性写入磁盘，这种方式可以减少磁盘操作次数，速度就会提高很多！（注意需要调用flush方法刷新缓冲区）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BufferedInputStream bis = <span class=\"keyword\">new</span> BufferedInputStream(<span class=\"keyword\">new</span> FileInputStream(<span class=\"keyword\">new</span> File(rfileName)));</span><br><span class=\"line\">            br = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(bis, <span class=\"string\">\"utf-8\"</span>), <span class=\"number\">20</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>);<span class=\"comment\">// 20M缓存</span></span><br></pre></td></tr></table></figure>\n<p>（需要注意编码的问题，否则中文会出现乱码）</p>\n<h4 id=\"分割大文件\"><a href=\"#分割大文件\" class=\"headerlink\" title=\"分割大文件\"></a>分割大文件</h4><p>这里也可以将一个大文件按行分割成若干个文件，再分别对每个小文件进行处理。</p>\n<p>相应代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">long</span> timer = System.currentTimeMillis();  </span><br><span class=\"line\"> <span class=\"keyword\">int</span> bufferSize = <span class=\"number\">20</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>;<span class=\"comment\">//设读取文件的缓存为20MB   </span></span><br><span class=\"line\">   </span><br><span class=\"line\"> <span class=\"comment\">//建立缓冲文本输入流   </span></span><br><span class=\"line\"> File file = <span class=\"keyword\">new</span> File(<span class=\"string\">\"E:\\\\Code-Sublime\\\\Java\\\\jysg.sql\"</span>);  </span><br><span class=\"line\"> FileInputStream fileInputStream = <span class=\"keyword\">new</span> FileInputStream(file);  </span><br><span class=\"line\"> BufferedInputStream bufferedInputStream = <span class=\"keyword\">new</span> BufferedInputStream(fileInputStream);  </span><br><span class=\"line\"> InputStreamReader inputStreamReader = <span class=\"keyword\">new</span> InputStreamReader(bufferedInputStream, <span class=\"string\">\"gbk\"</span>);  </span><br><span class=\"line\"> BufferedReader input = <span class=\"keyword\">new</span> BufferedReader(inputStreamReader, bufferSize);  </span><br><span class=\"line\">   </span><br><span class=\"line\"> <span class=\"keyword\">int</span> splitNum = <span class=\"number\">10</span>-<span class=\"number\">1</span>;<span class=\"comment\">//要分割的块数减一   </span></span><br><span class=\"line\"> <span class=\"keyword\">int</span> fileLines = <span class=\"number\">920080</span>;<span class=\"comment\">//输入文件的行数   </span></span><br><span class=\"line\"> <span class=\"keyword\">long</span> perSplitLines = fileLines / splitNum;<span class=\"comment\">//每个块的行数   </span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= splitNum; ++i)  </span><br><span class=\"line\"> &#123;  </span><br><span class=\"line\">     <span class=\"comment\">//分割   </span></span><br><span class=\"line\">     <span class=\"comment\">//每个块建立一个输出   </span></span><br><span class=\"line\">     FileWriter output = <span class=\"keyword\">new</span> FileWriter(<span class=\"string\">\"E:\\\\Code-Sublime\\\\Java\\\\split\"</span> + i + <span class=\"string\">\".sql\"</span>);  </span><br><span class=\"line\">     String line = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\">     <span class=\"comment\">//逐行读取，逐行输出   </span></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> lineCounter = <span class=\"number\">0</span>; lineCounter &lt; perSplitLines &amp;&amp; (line = input.readLine()) != <span class=\"keyword\">null</span>; ++lineCounter)  </span><br><span class=\"line\">     &#123;  </span><br><span class=\"line\">         output.append(line + <span class=\"string\">\"\\r\\n\"</span>);  </span><br><span class=\"line\">     &#125;  </span><br><span class=\"line\">     output.flush();  </span><br><span class=\"line\">     output.close();  </span><br><span class=\"line\">     output = <span class=\"keyword\">null</span>;  </span><br><span class=\"line\"> &#125;  </span><br><span class=\"line\"> input.close();  </span><br><span class=\"line\"> timer = System.currentTimeMillis() - timer;  </span><br><span class=\"line\"> System.out.println(<span class=\"string\">\"处理时间：\"</span> + timer);</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结和感想\"><a href=\"#总结和感想\" class=\"headerlink\" title=\"总结和感想\"></a>总结和感想</h2><p>学会发现和定位问题，并在规定时间内解决（不管用什么方法）</p>\n<p>参考资料：</p>\n<p><a href=\"http://ifeve.com/java-regex/\" target=\"_blank\" rel=\"noopener\">http://ifeve.com/java-regex/</a></p>\n<p><a href=\"https://blog.csdn.net/niyingxunzong/article/details/33335485\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/niyingxunzong/article/details/33335485</a></p>\n","tags":[{"name":"Java","slug":"Java","permalink":"http://xinyuexy.github.io/tags/Java/"},{"name":"MySQL","slug":"MySQL","permalink":"http://xinyuexy.github.io/tags/MySQL/"}]},{"title":"Servlet中的ServletConfig和ServletContext","date":"2018-03-15T08:49:52.000Z","path":"2018/03/15/Servlet中的ServletConfig和ServletContext/","content":"<p>最近在学习Servlet时，看到有些时候会用到ServletConfig和ServletContext两个类，而且这两个类还有点相似之处，所以写篇博客总结一下。首先看一下整个Servlet的层次结构。</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/servlet10.jpg\" style=\"zoom: 80%\"></p>\n<a id=\"more\"></a>\n<p>基本上主要的和Servlet相关的类就这么多了，可以看到ServletConfig和ServletContext在其中的位置和其他类的关系。</p>\n<h2 id=\"ServletConfig-API\"><a href=\"#ServletConfig-API\" class=\"headerlink\" title=\"ServletConfig API\"></a>ServletConfig API</h2><p>ServletConfig接口被用于传递一些配置信息给Servlet，每一个Servlet都独享一个自己的ServletConfig对象，然后servlet容器负责创建这个对象。我们可以在web.xml或者是WebInitParam注解方式设置一些servlet的初始参数信息，servlet通过得到ServletConfig对象实例调用其中的方法来得到这些初始信息。</p>\n<p>常用的方法如下：</p>\n<p><code>java.lang.String getInitParameter(java.lang.String name)  根据名称获取参数值</code></p>\n<p><code>java.util.Enumeration getInitParameterNames()         得到所有参数</code></p>\n<p><code>ServletContext getServletContext()                   获取servlet上下文对象</code></p>\n<p><code>java.lang.String getServletName()                    得到servlet名称</code></p>\n<p>通过在web.xml或注解中设置servlet初始参数，然后可以用上述方法获得这些参数：</p>\n<p>web.xml配置文件:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>LoginServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.journaldev.servlet.LoginServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 在web.xml中设置servlet初始参数(也可以使用注解方式) --&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">  \t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>user<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">  \t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>xinyue<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>获取方式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String user = getServletConfig().getInitParameter(<span class=\"string\">\"user\"</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：这里有个问题，为什么可以直接调用getServletConfig()方法，在Eclipse里Ctrl+鼠标点进去看发现调用的是GenericServlet类里的getServletConfig()方法。这是因为我们的Servlet类继承自HttpServlet，而HttpServlet又继承了GenericServlet类。</p>\n</blockquote>\n<p>GenericServlet类的定义如下：</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/servlet11.jpg\" style=\"zoom:80%\"></p>\n<p>可以看到GenericServlet类中定义了ServletConfig对象的引用，而且还是实现了ServletConfig接口。</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/servlet12.jpg\" style=\"zoom:80%\"></p>\n<p>其实也可以直接使用getInitParameter(“user”)，由于GenericServlet类实现了ServletConfig接口，所以其也会重载ServletConfig接口中的函数。</p>\n<h2 id=\"ServletContext-API\"><a href=\"#ServletContext-API\" class=\"headerlink\" title=\"ServletContext API\"></a>ServletContext API</h2><p>不同于ServletConfig，ServletContext接口主要用于保存web应用中全局信息，所有Servlet都可以共享这些信息。其会在web应用被加载时创建，然后其他servlet就可以调用它了。</p>\n<p>主要的方法如下:</p>\n<p>（1）得到web应用的上下文路径：</p>\n<p>​    <code>java.lang.String getContextPath()</code></p>\n<p> （2）获取web应用的全局参数 ：         </p>\n<p>　　 <code>java.lang.String getInitParameter(java.lang.String name)</code> </p>\n<p>　　 <code>java.util.Enumeration getInitParameterNames()</code>  </p>\n<p> （3）域对象相关的方法：</p>\n<p>　　  <code>java.lang.Object getAttribute(java.lang.String name)</code>    </p>\n<p>　　 <code>void setAttribute(java.lang.String name, java.lang.Object object)</code></p>\n<p>　　 <code>void removeAttribute(java.lang.String name)</code></p>\n<p> （4）用于转发：</p>\n<p>　　  <code>RequestDispatcher getRequestDispatcher(java.lang.String path)</code>  </p>\n<p> （5）web应用加载资源文件方法：</p>\n<p>　　  <code>java.lang.String getRealPath(java.lang.String path)</code>   </p>\n<p>　　  <code>java.io.InputStream getResourceAsStream(java.lang.String path)</code></p>\n<h2 id=\"ServletConfig和ServletContext的应用\"><a href=\"#ServletConfig和ServletContext的应用\" class=\"headerlink\" title=\"ServletConfig和ServletContext的应用\"></a>ServletConfig和ServletContext的应用</h2><p>下面通过一个登陆的例子来看一下两者的用法，参考：<a href=\"https://www.journaldev.com/1877/servlet-tutorial-java#servlet-interface。\" target=\"_blank\" rel=\"noopener\">https://www.journaldev.com/1877/servlet-tutorial-java#servlet-interface。</a></p>\n<p>在html表单里请求LoginServlet，用户输入指定的用户名和密码即可登陆成功，跳转到登陆成功页面，失败则显示登陆失败。</p>\n<p>我们主要讲解一下Servlet中的代码。首先在注解（或web.xml）中将用户名和密码作为servlet的初始参数存储（即前面讲ServletConfig相关的）：</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/servlet13.jpg\" style=\"zoom:60%\"></p>\n<p>通过ServletContext中的方法获取web应用的全局配置信息：</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/servlet15.jpg\" style=\"zoom:60%\"></p>\n<p>这里将数据库的配置作为全局信息，定义在web.xml文件的context-param中：</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/servlet14.jpg\" style=\"60%\"></p>\n<p>在doPost方法中通过ServletConfig获取servlet的初始参数：</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/servlet16.jpg\" style=\"zoom:60%\"></p>\n<p>如果登陆成功，通过sendRedirect方法重定向到LoginSuccess.jsp页面，否则转发到登陆页面。（这里要注意sendRedirect和getRequestDispatcher方法的区别）</p>\n<h2 id=\"总结和感想\"><a href=\"#总结和感想\" class=\"headerlink\" title=\"总结和感想\"></a>总结和感想</h2><p>1.源码是最好的学习资料，遇到问题时，要学会从源码中寻找答案。包括类的层次结构和每个方法的作用。</p>\n<p>2.在遇到一个新知识时，首先要知道这个知识涉及到哪些主要的类，这些类的关系是怎样的，然后再看每个类的方法。</p>\n<p>参考资料：</p>\n<p><a href=\"http://www.cnblogs.com/vmax-tam/p/4127396.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/vmax-tam/p/4127396.html</a></p>\n<p><a href=\"https://www.journaldev.com/1877/servlet-tutorial-java#servlet-interface\" target=\"_blank\" rel=\"noopener\">https://www.journaldev.com/1877/servlet-tutorial-java#servlet-interface</a></p>\n","tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"http://xinyuexy.github.io/tags/JavaWeb/"},{"name":"Servlet","slug":"Servlet","permalink":"http://xinyuexy.github.io/tags/Servlet/"}]},{"title":"关于链表题目的一些trick","date":"2018-03-11T10:12:03.000Z","path":"2018/03/11/关于leetcode上链表题目的一些trick/","content":"<p>最近在刷leetcode上关于链表的一些高频题，在写代码的过程中总结了链表的一些解题技巧和常见题型。</p>\n<h2 id=\"结点的删除\"><a href=\"#结点的删除\" class=\"headerlink\" title=\"结点的删除\"></a>结点的删除</h2><p>指定链表中的某个结点，将其从链表中删除。</p>\n<a id=\"more\"></a>\n<p>由于在链表中删除某个结点需要找到该结点的前一个位置，然后将前一个结点的next指针直接绕过该结点即可删除。但找到该结点的前一个位置需要指针遍历，其实还有一种更简单的trick，就是将要删除的结点的值设为该结点的后一个的值，然后删除该结点的后一个结点（间接删除，不需要找遍历前一个指针），代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteNode</span><span class=\"params\">(ListNode node)</span> </span>&#123;</span><br><span class=\"line\">        node.val = node.next.val;</span><br><span class=\"line\">        node.next = node.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在表头前增加虚拟结点\"><a href=\"#在表头前增加虚拟结点\" class=\"headerlink\" title=\"在表头前增加虚拟结点\"></a>在表头前增加虚拟结点</h2><p>很多场合下，在链表的表头前增加一个虚拟结点（dummy），并让其指向head，能简化很多操作。如在新创建一个链表或对链表进行遍历操作时，如果不增加虚拟结点，就需要处理当前结点是头结点的特殊情况（因为头结点前没有其他结点，导致操作代码不一致）。加了虚拟结点后就可以像操作其他结点一样对待头结点了，最后只需要返回虚拟结点的next就可以了。</p>\n<p>如LeetCode上的这一题：<a href=\"https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/\" target=\"_blank\" rel=\"noopener\">Remove Nth Node From End of List</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">removeNthFromEnd</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        dummy.next = head;</span><br><span class=\"line\">        ListNode p = dummy;</span><br><span class=\"line\">        ListNode q = dummy;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            q = q.next;</span><br><span class=\"line\">            n--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            p = p.next;</span><br><span class=\"line\">            q = q.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p.next = p.next.next;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"链表转置\"><a href=\"#链表转置\" class=\"headerlink\" title=\"链表转置\"></a>链表转置</h2><p>这应该是我碰到的链表中最频繁的问题了，很多其他链表的题目可能也需要借助于链表转置这一功能，所以需要能够熟练地写出代码，这里给出包括迭代和递归两种版本的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//迭代实现链表转置</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        ListNode prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(head != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ListNode next = head.next;</span><br><span class=\"line\">            head.next = prev;</span><br><span class=\"line\">            prev = head;</span><br><span class=\"line\">            head = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//递归实现链表转置</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseList2</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span> || head.next == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ListNode next = head.next;</span><br><span class=\"line\">        <span class=\"comment\">//对head.next执行转置</span></span><br><span class=\"line\">        ListNode newHead = reverseList(next);</span><br><span class=\"line\">        <span class=\"comment\">//此时next变成了转置后的尾结点</span></span><br><span class=\"line\">        next.next = head;</span><br><span class=\"line\">        head.next = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> newHead;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"快慢双指针\"><a href=\"#快慢双指针\" class=\"headerlink\" title=\"快慢双指针\"></a>快慢双指针</h2><p>有时候需要找到链表的中间位置的结点，这时就需要设置两个指针slow和fast，slow每次往前移动一个，fast移动两个。当fast为空时，slow就指向了链表的中间位置。比如leetcode上的<a href=\"https://leetcode.com/problems/palindrome-linked-list/description/\" target=\"_blank\" rel=\"noopener\">Palindrome Linked List</a>在判断链表是否回文时，需要找到中间位置，然后将其后半部分转置和前半部分相比较，具体实现代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"keyword\">null</span> || head.next == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//注意不能直接转置整个链表，需要找到链表的中间，只转置后半部分</span></span><br><span class=\"line\">        ListNode fast = head, slow = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(fast != <span class=\"keyword\">null</span> &amp;&amp; fast.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            fast = fast.next.next;</span><br><span class=\"line\">            slow = slow.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//这时slow指向了链表的中间结点（注意这种trick要记住）</span></span><br><span class=\"line\">        slow = reverseList(slow);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(head != <span class=\"keyword\">null</span> &amp;&amp; slow != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(head.val != slow.val) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            head = head.next;</span><br><span class=\"line\">            slow = slow.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ListNode <span class=\"title\">reverseList</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        ListNode prev = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(head != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            ListNode next = head.next;</span><br><span class=\"line\">            head.next = prev;</span><br><span class=\"line\">            prev = head;</span><br><span class=\"line\">            head = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"合并两个有序链表\"><a href=\"#合并两个有序链表\" class=\"headerlink\" title=\"合并两个有序链表\"></a>合并两个有序链表</h2><p>这也是碰到的很常见的问题了，合并两个有序链表使其仍然保持有序，一般采用双指针法，这也需要能够熟练地写出无bug的代码来。这里给出迭代和递归两种实现方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeTwoLists</span><span class=\"params\">(ListNode l1, ListNode l2)</span> \t</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1 == <span class=\"keyword\">null</span> &amp;&amp; l2 == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ListNode p = l1;</span><br><span class=\"line\">        ListNode q = l2;</span><br><span class=\"line\">        ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">        ListNode pp = dummy;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p != <span class=\"keyword\">null</span> &amp;&amp; q != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p.val &lt; q.val) &#123;</span><br><span class=\"line\">                dummy.next = <span class=\"keyword\">new</span> ListNode(p.val);</span><br><span class=\"line\">                p = p.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                dummy.next = <span class=\"keyword\">new</span> ListNode(q.val);</span><br><span class=\"line\">                q = q.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dummy = dummy.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//直接将dummy指过去</span></span><br><span class=\"line\">            dummy.next = p;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">         <span class=\"keyword\">if</span>(q != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">             dummy.next = q;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> pp.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//使用递归更简单</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeTwoLists2</span><span class=\"params\">(ListNode l1, ListNode l2)</span> \t</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l2==<span class=\"keyword\">null</span>) <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1.val&lt;l2.val)&#123;</span><br><span class=\"line\">            l1.next = mergeTwoLists(l1.next,l2);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            l2.next = mergeTwoLists(l1,l2.next);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">        &#125;         </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>目前碰到的问题就这么多了，后面再继续补充吧。</p>\n","tags":[{"name":"Algorithm","slug":"Algorithm","permalink":"http://xinyuexy.github.io/tags/Algorithm/"},{"name":"LinkedList","slug":"LinkedList","permalink":"http://xinyuexy.github.io/tags/LinkedList/"}]},{"title":"Sublime-text搭建Java编译环境","date":"2018-02-04T10:28:21.000Z","path":"2018/02/04/Sublime-text搭建Java编译环境/","content":"<p>以前运行Java代码都是在Eclipse或IDEA中进行，当开发大型项目的时候用这些IDE确实很方便，但有时候自己仅仅是像用Java写写简单的算法或小demo，这样每次打开这样大型的IDE太不方便了。于是想到了sublime text，之前只是用其搭建过C++和python的环境，没想到搭建Java也如此的方便强大，下面简单写下自己搭建的过程。</p>\n<h2 id=\"搭建Java编译环境\"><a href=\"#搭建Java编译环境\" class=\"headerlink\" title=\"搭建Java编译环境\"></a>搭建Java编译环境</h2><p>在此之前请确保已配置好jdk环境变量。打开sublime text，依次点击Tools-&gt; Build System-&gt; New Build System，添加如下内容：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    // 命令和参数，未指定路径则在PATH环境变量中找</span><br><span class=\"line\">    \"cmd\": [\"javac\",\"-encoding\",\"UTF-8\",\"-d\",\".\",\"$file\"],</span><br><span class=\"line\">    // 可选。获取cmd的错误输出</span><br><span class=\"line\">    \"file_regex\": \"^(...*?):([0-9]*):?([0-9]*)\",</span><br><span class=\"line\">    // 可选。`工具`菜单中`编译`为`自动`时生效</span><br><span class=\"line\">    \"selector\": \"source.java\",</span><br><span class=\"line\">    // 可选。输出\"cmd\"的编码。必须是合法的Python编码，缺省为\"UTF-8\"</span><br><span class=\"line\">    \"encoding\":\"UTF-8\",</span><br><span class=\"line\">    // variants 可选。用来替代主构建系统的备选。如果构建系统的\"selector\"与激活的文件匹配，变量\"name\"则会出现在 Command Palette 中。</span><br><span class=\"line\">    \"variants\":</span><br><span class=\"line\">        [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                 // 仅在\"variants\"中是合法的 (详见 variants)。用来标识系统中不同的构建系统。如果\"name\"是\"Run\" ,则会显示在Tools | Build System 菜单下，并且可以使用Ctrl + Shift + B调用</span><br><span class=\"line\">                \"name\": \"Run in cmd\",</span><br><span class=\"line\">                // 可选。如果该选项为\"true\" ，\"cmd\"则可以通过shell运行。</span><br><span class=\"line\">                \"shell\": true,</span><br><span class=\"line\">                \"cmd\" :  [\"start\",\"cmd\",\"/c\", \"java $&#123;file_base_name&#125; &amp;echo. &amp; pause\"],</span><br><span class=\"line\">                \"working_dir\": \"$&#123;file_path&#125;\",</span><br><span class=\"line\">                \"encoding\":\"UTF-8\"</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Run in sublime\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"shell_cmd\"</span>: <span class=\"string\">\"runJava.bat \\\"$file\\\"\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"file_regex\"</span>: <span class=\"string\">\"^(...*?):([0-9]*):?([0-9]*)\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"selector\"</span>: <span class=\"string\">\"source.java\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"encoding\"</span>: <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里采用了两种方式，注意variants里的内容，其实配置C++等其他语言也是类似的。第一种我给的“name”为：Run in cmd，表示在控制台下运行，第二种为在sublime text中运行。ctrl-s保存，文件名我这里命名为MyJava。</p>\n<p>其中在sublime text中运行时还要添加如下文件，在jdk的安装目录下的bin目录下新建runJava.bat文件，内容为：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> @echo off</span><br><span class=\"line\"> cd%~dp1</span><br><span class=\"line\"> echo Compiling %~nx1......</span><br><span class=\"line\"> <span class=\"keyword\">if</span> exist %~n1.class (</span><br><span class=\"line\"> del %~n1.class</span><br><span class=\"line\"> )</span><br><span class=\"line\">javac %~nx1</span><br><span class=\"line\"><span class=\"keyword\">if</span> exist %~n1.class (</span><br><span class=\"line\">echo ------Output------</span><br><span class=\"line\">java %~n1</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>（注意在如果在sublime下运行则无法支持输入，在cmd中可以）</p>\n<p>Ctrl+Shift+P选择运行方式：</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/sublimeGIF1.gif\" style=\"zoom:60%\"></p>\n<h2 id=\"Java代码提示补全\"><a href=\"#Java代码提示补全\" class=\"headerlink\" title=\"Java代码提示补全\"></a>Java代码提示补全</h2><p>光能编译运行还不够，最好还需要能够智能提示，这里推荐JavaIME插件，安装好即可使用，无需任何配置。具体演示如下：</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/sublimeGIF2.gif\" style=\"zoom:60%\"></p>\n<p>参考资料如下：<br><a href=\"https://packagecontrol.io/packages/JavaIME\" target=\"_blank\" rel=\"noopener\">https://packagecontrol.io/packages/JavaIME</a></p>\n<p><a href=\"https://www.zybuluo.com/king/note/47271#%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8Cjava\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/king/note/47271#%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8Cjava</a></p>\n","tags":[{"name":"Java","slug":"Java","permalink":"http://xinyuexy.github.io/tags/Java/"},{"name":"sublime","slug":"sublime","permalink":"http://xinyuexy.github.io/tags/sublime/"}]},{"title":"关于未来学习的一点定位和规划","date":"2018-02-04T03:03:08.000Z","path":"2018/02/04/关于未来学习的一点定位和规划/","content":"<p>思来想去有一段时间了，对于自己以后是走开发和算法也该有个结论了。两方面都花时间尝试了一下，虽然现在机器学习很热门，但其需要深厚的数学功底，否则也只是调得一手好参，无法深入下去。自己还是更喜欢丰富多样的业务场景，解决实际问题，相比于数学公式，还是更喜欢看源码。</p>\n<p>对于开发，自己选择专攻后台开发这一方向，当然基本的开发素养和解决实际问题的能力是必不可少的 。语言可以是Java，当然不局限于语言，其实语言就像是程序员手中的武器，只要内力深厚，各种武器都可以发挥巨大威力。</p>\n<a id=\"more\"></a>\n<h2 id=\"后台开发需要锻炼的技能\"><a href=\"#后台开发需要锻炼的技能\" class=\"headerlink\" title=\"后台开发需要锻炼的技能\"></a>后台开发需要锻炼的技能</h2><p>自己现在对后台开发还不是太了解，所以先暂时写一下自己所知道的，以后再慢慢补充和调整。针对后台开发，我目前觉得需要从以下几方面去着手逐一攻破：</p>\n<p><strong>1.熟练掌握一门语言（这里选择Java）</strong>，包括该语言的各种特性。这就像是程序员的武器，没有武器或不熟悉自己的武器，如何在战场杀敌。</p>\n<p><strong>2.基本的CS基础：网络、操作系统等，</strong>要理解其原理和如何应用在实际场景中。这就像是程序员使用的各种武功招式，不管武器如何变，招式都是一样的。</p>\n<p><strong>3.算法和数据结构：</strong>灵活理解和掌握常用算法和数据结构，经常刷题。这就像是程序员的内功一样，有时候真正高手的差别就体现在这里。</p>\n<p><strong>4.常用开发环境以及框架：</strong>包括IDE、Linux等开发环境的熟悉，SSM等基本框架的掌握。这就像是程序员以后要面临的战场环境，决胜沙场就在此处了。</p>\n<p><strong>5.架构和实际业务场景有关的：</strong>如分布式、高并发，负载均衡等，这部分也需要重点掌握，面试时会是加分项（自己的项目一般不会用到，但大公司都会，这里可以关注阿里、美团等电商在架构和效率提升上的一些技术）。这就像是高级的武功秘籍一样，掌握了就可以一敌百（想想乔帮主的降龙十八掌）.</p>\n<p><strong>6.一些拓展, 保持眼界和学习新技术的热情: </strong>可以关注当下的一些热点技术(如机器学习 大数据等) 也不需要盲目的去学习, 对于能用到的可以适当采用. 这就像是武学里常说的”练一家, 观百家”, 需要对技术的发展保持一个整体的眼界, 不至于落后.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面所罗列的只是一个整体的方向,对于每一条都需要详细制定出具体的学习计划. 希望自己能力去遵循, 逐一攻破,不能再犹犹豫豫,踌躇不前, 努力排除外界干扰, 不为外界所动. </p>\n<p>其实以前太在意能够寻找一些捷径和快速的方法去学习, 以致于都无法静下心来去攻读一本好书.  其实最简单高效的学习方法就是: 多读好书, 多看源码, 多实践, 多总结, 多思考. 希望自己在接下来的时间里能够沉淀下来学习.</p>\n<p>坚持内心 , 无问西东 !</p>\n","tags":[{"name":"随笔","slug":"随笔","permalink":"http://xinyuexy.github.io/tags/随笔/"}]},{"title":"阿里云服务器部署Java Web项目全过程","date":"2018-01-30T12:05:08.000Z","path":"2018/01/30/阿里云服务器部署Web项目/","content":"<p>最近需要将一个Java Web项目部署到服务器上，方便多人共享访问。这也是我第一次接触服务器之类的东西，也花了一点时间，最终总算部署成功，写下一篇文章记录以便日后回顾。</p>\n<h2 id=\"购买服务器\"><a href=\"#购买服务器\" class=\"headerlink\" title=\"购买服务器\"></a>购买服务器</h2><p>第一步当然是需要购买一台服务器了，我选择的是阿里云的ECS，对于新用户有一定的优惠活动。服务器徐购好后可以在管理控制台下看到自己服务器的配置情况。我买的是centos7 1核2G的，详情如下：</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/%E9%98%BF%E9%87%8C%E4%BA%917.jpg\" style=\"zoom:60%\"></p>\n<a id=\"more\"></a>\n<h2 id=\"本地主机连接服务器\"><a href=\"#本地主机连接服务器\" class=\"headerlink\" title=\"本地主机连接服务器\"></a>本地主机连接服务器</h2><p>购买了服务器之后，下一步当时是要远程操作服务器，所以需要和远程服务器建立连接。这里有两种方式：一种是使用阿里云控制中心自带的管理终端进行远程连接，另一种是使用熟知的ssh协议。</p>\n<h3 id=\"使用管理终端连接\"><a href=\"#使用管理终端连接\" class=\"headerlink\" title=\"使用管理终端连接\"></a>使用管理终端连接</h3><p>登陆ECS控制台，单击左侧导航栏里的实例，右边有一个远程连接选项</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/%E9%98%BF%E9%87%8C%E4%BA%912.jpg\" style=\"zoom:80%\"> </p>\n<p>注意第一次登陆时会分配一个密码，将其记住，下次需要用这个密码登陆，登陆后的界面如下所示：</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/%E9%98%BF%E9%87%8C%E4%BA%913.jpg\" style=\"zoom:70%\"></p>\n<h3 id=\"使用ssh连接\"><a href=\"#使用ssh连接\" class=\"headerlink\" title=\"使用ssh连接\"></a>使用ssh连接</h3><p>windows下需要下载putty工具，需要用puttygen生成密钥对，具体可参见：</p>\n<p><a href=\"https://help.aliyun.com/document_detail/51798.html?spm=5176.doc25425.2.11.Fe06aK\" target=\"_blank\" rel=\"noopener\">https://help.aliyun.com/document_detail/51798.html?spm=5176.doc25425.2.11.Fe06aK</a></p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/%E9%98%BF%E9%87%8C%E4%BA%914.jpg\" style=\"zoom:80%\"></p>\n<h2 id=\"搭建Java-Web开发环境\"><a href=\"#搭建Java-Web开发环境\" class=\"headerlink\" title=\"搭建Java Web开发环境\"></a>搭建Java Web开发环境</h2><p>接下来需要在远程centos服务器上搭建Java Web开发环境，这里可以选择镜像部署和手工部署，阿里云上提供了很多相关环境的镜像，我这里使用手动部署的方式自己安装软件。部署Java Web需要分别安装配置jdk、tomcat、mysql，我创建了一个用户，并给该用户授权sudo。在该用户的目录下分布创建java、tomcat和mysql目录用于存放相应的软件和文件。</p>\n<h3 id=\"JDK配置\"><a href=\"#JDK配置\" class=\"headerlink\" title=\"JDK配置\"></a>JDK配置</h3><p>可以在官网上或使用命令wget下载相应版本的jdk安装包，由于我的本地项目使用的是jdk8，所以这里也下载对应的版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirrors.linuxeye.com/jdk/jdk-8u144-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>\n<p>将其解压到安装目录，我这里是/home/vcc/java</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzf jdk-8u144-linux-x64.tar.gz -C /home/vcc/java</span><br></pre></td></tr></table></figure>\n<p>设置环境变量：</p>\n<p>编辑/etc/profile文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/profile</span><br></pre></td></tr></table></figure>\n<p>进入编辑模式后在最后添加如下信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"built_in\">set</span> java environment</span></span><br><span class=\"line\">export JAVA_HOME=/home/vcc/java/jdk1.8.0_144</span><br><span class=\"line\">export CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>\n<p>保存后退出，加载环境变量：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<p>查看jdk版本：</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/%E9%98%BF%E9%87%8C%E4%BA%915.jpg\" style=\"zoom:80%\"></p>\n<h3 id=\"tomcat安装配置\"><a href=\"#tomcat安装配置\" class=\"headerlink\" title=\"tomcat安装配置\"></a>tomcat安装配置</h3><p>tomcat的安装和jdk类似，需要注意要想在外部使用服务器的ip地址访问，需要在阿里云安全组规则中允许8080端口通过，详情如下：</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/%E9%98%BF%E9%87%8C%E4%BA%916.jpg\" style=\"zoom:60%\"></p>\n<p>注意在前面ssh连接中也需要设置安全组规则，配置好，在本机输入ip地址:8080即可访问tomcat页面，表明配置成功，具体可参见阿里云官方文档：</p>\n<p><a href=\"https://help.aliyun.com/document_detail/51376.html?spm=5176.doc52806.6.757.bJq7gM\" target=\"_blank\" rel=\"noopener\">https://help.aliyun.com/document_detail/51376.html?spm=5176.doc52806.6.757.bJq7gM</a></p>\n<h3 id=\"mysql安装配置\"><a href=\"#mysql安装配置\" class=\"headerlink\" title=\"mysql安装配置\"></a>mysql安装配置</h3><p>本来想安装mysql5.7的，结果安装过程中总是出现问题，就该换mysql5.6了，安装教程网上应该有很多，这里就不多说了。安装好后运行命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld start</span><br></pre></td></tr></table></figure>\n<p>启动mysql后，运行命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n<p>使用root用户登陆mysql。</p>\n<h2 id=\"部署Java-Web项目\"><a href=\"#部署Java-Web项目\" class=\"headerlink\" title=\"部署Java Web项目\"></a>部署Java Web项目</h2><p>我需要将本地的Java Web工程打包成war，以及将数据库导出至sql文件一并上传到服务器上。这里可以使用pscp工具进行本地主机和服务器之间文件的上传和下载，需要下载pscp并和putty放在同一目录下，cmd进入到putty目录，使用命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pscp E:\\data.sql root@ip地址:/home/vcc/mysql</span><br></pre></td></tr></table></figure>\n<p>将项目的war包放到tomcat的webapps目录下，tomcat运行后会自动将其解压，然后就可以使用路径来访问了。</p>\n<p>对于数据库的导入，需要在mysql命令下先创建同名的数据库，然后使用source data.sql运行即可。这里要注意需要将MySQL客户端和服务器端的编码都设置为utf8，否则在部署访问的时候会出现问题。这里可以通过修改/etc/my.cnf文件：</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/%E9%98%BF%E9%87%8C%E4%BA%918.jpg\" style=\"zoom:80%\"></p>\n<p>在本机上成功访问项目：</p>\n<p><img src=\"http://ou5lyiz64.bkt.clouddn.com/img/%E9%98%BF%E9%87%8C%E4%BA%919.jpg\" style=\"zoom:60%\"></p>\n","tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"http://xinyuexy.github.io/tags/JavaWeb/"},{"name":"阿里云","slug":"阿里云","permalink":"http://xinyuexy.github.io/tags/阿里云/"}]},{"title":"Hello World","date":"2018-01-27T06:24:35.957Z","path":"2018/01/27/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<a id=\"more\"></a>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","tags":[{"name":"随笔","slug":"随笔","permalink":"http://xinyuexy.github.io/tags/随笔/"}]}]